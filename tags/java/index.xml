<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on ZYBNET</title>
    <link>https://www.zybnet.com/tags/java/index.xml</link>
    <description>Recent content in Java on ZYBNET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>raffaeleSgarro@gmail.com (Raffaele Sgarro)</managingEditor>
    <webMaster>raffaeleSgarro@gmail.com (Raffaele Sgarro)</webMaster>
    <atom:link href="https://www.zybnet.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Generics demistified</title>
      <link>https://www.zybnet.com/2013/10/27/generics-demistified/</link>
      <pubDate>Sun, 27 Oct 2013 10:35:31 +0000</pubDate>
      <author>raffaeleSgarro@gmail.com (Raffaele Sgarro)</author>
      <guid>https://www.zybnet.com/2013/10/27/generics-demistified/</guid>
      <description>&lt;p&gt;Take this load of questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why can I put an &lt;code&gt;Integer&lt;/code&gt; in a &lt;code&gt;List&amp;lt;Number&amp;gt;&lt;/code&gt; but can&amp;rsquo;t assign a &lt;code&gt;List&amp;lt;Integer&amp;gt;&lt;/code&gt; to a &lt;code&gt;List&amp;lt;Number&amp;gt;&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Why can I put any &lt;code&gt;Number&lt;/code&gt; in a &lt;code&gt;List&amp;lt;? super Number&amp;gt;&lt;/code&gt; but can&amp;rsquo;t do the same with a &lt;code&gt;List&amp;lt;? extends Number&amp;gt;&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Why doesn&amp;rsquo;t &lt;code&gt;List&amp;lt;? extends Number&amp;gt;&lt;/code&gt; extends &lt;code&gt;List&amp;lt;? super Number&amp;gt;&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;These and similar questions are asked very often, but usually answered like this:&lt;/p&gt;

&lt;blockquote&gt;Consider what happens with arrays:
&lt;pre&gt;&lt;code&gt;String[] strings = { &#34;Foo&#34;, &#34;Bar&#34;, &#34;Baz&#34; };
Object[] objects = strings;
objects[0] = new Integer(1); // BOOOOM!
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;This kind of answer is misleading at best, because it pretends that generic types are a feature of the Collections framework of the platform, which is simply not true. Generics are a feature of Java-the-language, and are employed throughout the API (Class, Enum, Comparable) as well as in third party libraries (especially ones dealing with I/O, and thus reflection, like Jackson, jOOQ, etc.)&lt;/p&gt;

&lt;p&gt;Relevant links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.5.2&#34;&gt;4.5.2. Members and Constructors of Parameterized Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.10.2&#34;&gt;4.10.2. Subtyping among Class and Interface Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.2.1&#34;&gt;15.12.2.1. Identify Potentially Applicable Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Puzzled by generics and enums</title>
      <link>https://www.zybnet.com/2013/06/27/puzzled-by-generics-and-enums/</link>
      <pubDate>Thu, 27 Jun 2013 20:01:08 +0000</pubDate>
      <author>raffaeleSgarro@gmail.com (Raffaele Sgarro)</author>
      <guid>https://www.zybnet.com/2013/06/27/puzzled-by-generics-and-enums/</guid>
      <description>&lt;p&gt;I had to write a method which, given an &lt;code&gt;Enum&lt;/code&gt; class, returned the set of values. First signature attempt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Set&amp;lt;Enum&amp;lt;?&amp;gt;&amp;gt; getValuesForEnum(Class&amp;lt;Enum&amp;lt;?&amp;gt;&amp;gt; klass);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately this doesn&amp;rsquo;t work. When you try to invoke this method you got the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getValuesForEnum() can&#39;t be applied to &amp;quot;name.of.the.Enum&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we have an enum named &lt;code&gt;com.example.MyEnum&lt;/code&gt;. The compiler complains because &lt;code&gt;MyEnum.class&lt;/code&gt; is not a subtype of &lt;code&gt;Class&amp;lt;Enum&amp;lt;?&amp;gt;&amp;gt;&lt;/code&gt;. Can you spot the error? Nested type parameters are always tricky to deal with. In this case I had to perform the following reasoning:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;A&amp;lt;Y&amp;gt;&lt;/code&gt; is a subtype of &lt;code&gt;A&amp;lt;X&amp;gt;&lt;/code&gt; if &amp;hellip; well this never happens! For the subtype relationship to exist, wildcard must come into play, and there are no wildcards here. Except, well, there is a wildcard indeed: &lt;code&gt;Enum&amp;lt;?&amp;gt;&lt;/code&gt;! Unfortunately it&amp;rsquo;s in the wrong place. We have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Class&amp;lt;Enum&amp;lt;?&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Class&amp;lt;MyEnum&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To fix this problem the signature needs to be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Set&amp;lt;Enum&amp;lt;?&amp;gt;&amp;gt; getValuesForEnum( Class&amp;lt;? extends Enum&amp;lt;?&amp;gt;&amp;gt; klass);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generics are invariant in Java: a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; can&amp;rsquo;t be used where a &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt; is expected, regardless of the subtype relation between String and Object. It&amp;rsquo;s not different in this case: just that we don&amp;rsquo;t have String and Object, but &lt;code&gt;Enum&amp;lt;?&amp;gt;&lt;/code&gt; and &lt;code&gt;Enum&amp;lt;MyEnum&amp;gt;&lt;/code&gt;. There exists a subtype relation between the two arguments, but it&amp;rsquo;s irrelevant because our &lt;code&gt;X&lt;/code&gt; is &lt;code&gt;Enum&amp;lt;?&amp;gt;&lt;/code&gt;, so it&amp;rsquo;s not a wildcard.&lt;/p&gt;

&lt;p&gt;What puzzled me is that it&amp;rsquo;s a generic type and the type argument happens to be a wildcard.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XPath and namespaces</title>
      <link>https://www.zybnet.com/2012/07/28/xpath-and-namespaces/</link>
      <pubDate>Sat, 28 Jul 2012 11:45:58 +0000</pubDate>
      <author>raffaeleSgarro@gmail.com (Raffaele Sgarro)</author>
      <guid>https://www.zybnet.com/2012/07/28/xpath-and-namespaces/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s consider the following XML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;notes&amp;gt;
   &amp;lt;note&amp;gt;
      &amp;lt;heading&amp;gt;Remember the milk&amp;lt;/heading&amp;gt;
      &amp;lt;body&amp;gt;Don&#39;t forget me this weekend!&amp;lt;/body&amp;gt;
   &amp;lt;/note&amp;gt;
   &amp;lt;note&amp;gt;
      &amp;lt;heading&amp;gt;Call Anna&amp;lt;/heading&amp;gt;
      &amp;lt;body&amp;gt;Don&#39;t forget me this weekend!&amp;lt;/body&amp;gt;
   &amp;lt;/note&amp;gt;
   &amp;lt;note&amp;gt;
      &amp;lt;heading&amp;gt;Feed the trolls&amp;lt;/heading&amp;gt;
      &amp;lt;body&amp;gt;Don&#39;t forget me this weekend!&amp;lt;/body&amp;gt;
   &amp;lt;/note&amp;gt;
   &amp;lt;note&amp;gt;
      &amp;lt;heading&amp;gt;Hooray!&amp;lt;/heading&amp;gt;
      &amp;lt;body&amp;gt;Don&#39;t forget me this weekend!&amp;lt;/body&amp;gt;
   &amp;lt;/note&amp;gt;
&amp;lt;/notes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the following Java program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NodeList notes = (NodeList) xpath.evaluate(&amp;quot;//note/heading/text()&amp;quot;,
    builder.parse(ColladaXPath.class.getResourceAsStream(&amp;quot;notes.xml&amp;quot;)),
    XPathConstants.NODESET);

for (int i = 0; i &amp;lt; notes.getLength(); i++) {
    System.out.println(notes.item(i).getNodeValue());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything works fine until one adds the infamous &lt;code&gt;xmlns&lt;/code&gt; attribute to the root element. At this point, XPath won&amp;rsquo;t be able to find anything without a &lt;code&gt;prefix&lt;/code&gt;, so we&amp;rsquo;ll have to change the XPath expression to something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//n:note/n:heading/text()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the &lt;code&gt;n:&lt;/code&gt; prefix does not need to appear in the source XML. It is used on the XPath side and mapped to a xmlns with a subclass of &lt;code&gt;javax.xml.namespace.NamespaceContext&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class NotesNamespaceCtx implements NamespaceContext {
    public String getNamespaceURI(String prefix) {
        return &amp;quot;foobarbaz&amp;quot;;
    }

    public String getPrefix(String namespaceURI) {
        return &amp;quot;n&amp;quot;;
    }

    public Iterator&amp;lt;?&amp;gt; getPrefixes(String namespaceURI) {
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The String returned by &lt;code&gt;getNamespaceURI()&lt;/code&gt; must be the value of xmlnls. In this case it&amp;rsquo;s &lt;code&gt;xmlns=&amp;quot;foobarbaz&amp;quot;&lt;/code&gt;. Here is a full implementation (it needs &lt;a href=&#34;http://code.google.com/p/guava-libraries/&#34;&gt;Guava&lt;/a&gt; to be compiled and run)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.zybnet;

import java.util.Iterator;

import javax.xml.namespace.NamespaceContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.NodeList;

import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;

public class ColladaXPath {

    public static void main(String[] args) throws Exception {
        NodeList notes = (NodeList) xpath.evaluate(&amp;quot;//n:note/n:heading/text()&amp;quot;,
                builder.parse(ColladaXPath.class.getResourceAsStream(&amp;quot;notes.xml&amp;quot;)),
                XPathConstants.NODESET);

        for (int i = 0; i &amp;lt; notes.getLength(); i++) {
            System.out.println(notes.item(i).getNodeValue());
        }

    }

    static XPath xpath;
    static DocumentBuilder builder;

    static {
        DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
        domFactory.setNamespaceAware(true); // !IMPORTANT

        try {
            builder = domFactory.newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }

        xpath = XPathFactory.newInstance().newXPath();
        NamespaceCtxImpl ns = new NamespaceCtxImpl();
        ns.register(&amp;quot;n&amp;quot;, &amp;quot;foobarbaz&amp;quot;);
        xpath.setNamespaceContext(ns);
    }

    private static class NamespaceCtxImpl implements NamespaceContext {
        private BiMap&amp;lt;String, String&amp;gt; xmlns = HashBiMap.create();

        public void register(String prefix, String uri) {
            xmlns.put(prefix, uri);
        }

        @Override
        public String getNamespaceURI(String prefix) {
            return xmlns.get(prefix);
        }

        @Override
        public String getPrefix(String namespaceURI) {
            return xmlns.inverse().get(namespaceURI);
        }

        @Override
        public Iterator&amp;lt;String&amp;gt; getPrefixes(String namespaceURI) {
            return xmlns.keySet().iterator();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Java logging with log4j</title>
      <link>https://www.zybnet.com/2012/07/13/java-logging-with-log4j/</link>
      <pubDate>Fri, 13 Jul 2012 15:30:20 +0000</pubDate>
      <author>raffaeleSgarro@gmail.com (Raffaele Sgarro)</author>
      <guid>https://www.zybnet.com/2012/07/13/java-logging-with-log4j/</guid>
      <description>&lt;p&gt;What is a Logger? Basically it&amp;rsquo;s an object which lets you write code like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logger.debug(&amp;quot;Just entered main&amp;quot;);
logger.error(new FileNotFoundException(&amp;quot;/home/foo/bar.txt&amp;quot;));
logger.warn(new Integer(12921));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of all those &lt;code&gt;System.out.println&lt;/code&gt; to log what your program does. With log4j one can conveniently log to stdout, a rolling file, the syslog daemon, a message queue and so on.&lt;/p&gt;

&lt;p&gt;How to get a Logger object? Call the static method &lt;code&gt;Logger.getLogger(String name)&lt;/code&gt;. As you can see, when you get a Logger you explicitely supply an identifier. This name is used to provide context to logging calls, so they can be effectively filtered depending on applied settings. Logger names are arranged in a hierarchical tree based on their dot separated names, exactly like DNS works: com.foo is the parent of com.foo.bar, which is a com.foo child and a descendant of both com and com.foo. Instead &amp;laquo;com&amp;raquo; alone is said to be an ancestor of com.foo.bar. The hierarchy matters because child loggers inherits some properties from their ancestors, like level and default appenders.&lt;/p&gt;

&lt;p&gt;Logging is usually configured in a property files, sometimes to give users a chance for customization, but more often just to tell declarative code apart. So we put this &lt;code&gt;log4j.properties&lt;/code&gt; somewhere in the &lt;code&gt;CLASSPATH&lt;/code&gt; (sometimes it can be useful to start the VM with the system property &lt;code&gt;-Dlog4j.debug&lt;/code&gt; to see what configuration file log4j is picking to configure itself):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Declare a logger named &amp;quot;com.zybnet&amp;quot;, and add
# two named appenders: &amp;quot;goku&amp;quot; and &amp;quot;vegeta&amp;quot;.
# The first argument, &amp;quot;debug&amp;quot;, is optional and specifies
# the minimum level for the message to be logged
log4j.logger.com.zybnet=debug, goku, vegeta

# Declare the &amp;quot;goku&amp;quot; appender and define it
log4j.appender.goku=org.apache.log4j.ConsoleAppender
log4j.appender.goku.layout=org.apache.log4j.PatternLayout
log4j.appender.goku.layout.ConversionPattern=[%-5p] %m%n

# Declare the &amp;quot;vegeta&amp;quot; appender
log4j.appender.vegeta=org.apache.log4j.RollingFileAppender
log4j.appender.vegeta.layout=org.apache.log4j.HTMLLayout
log4j.appender.vegeta.layout.Title=My fantastic app log
log4j.appender.vegeta.File=/users/raffaele/desktop/main.log.html
log4j.appender.vegeta.MaxFileSize=500KB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is quite well commented, you should intuitively understand what an &amp;laquo;appender&amp;raquo; is, what a &amp;laquo;layout&amp;raquo; is and how a named logger is created and configured. The only things that should be noted is that this file is interpreted by the &lt;code&gt;PropertyConfigurator&lt;/code&gt; after the JavaBean standard: when you see &lt;code&gt;setSomething()&lt;/code&gt; and &lt;code&gt;getSomething()&lt;/code&gt; in the Javadoc, there is a property named Something that can be configured (examples are &lt;code&gt;vegeta.File&lt;/code&gt; and &lt;code&gt;layout.ConversionPattern&lt;/code&gt;). Remeber to traverse the Java class hierarchy to discover properties defined by superclasses.&lt;/p&gt;

&lt;p&gt;Here is a sample Java demo which exercise the log4j API and also illustrates how to get a logger via a class name&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.zybnet;

import java.io.FileNotFoundException;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

public class Main {

    static Logger logger;

    static {
        logger = Logger.getLogger(Main.class);
        PropertyConfigurator.configure(Main.class.getResource(&amp;quot;log4j.properties&amp;quot;));
    }

    public static void main(String[] args) {
        logger.debug(&amp;quot;Just entered main&amp;quot;);
        logger.error(new FileNotFoundException(&amp;quot;/home/foo/bar.txt&amp;quot;));
        logger.warn(new Integer(12921));
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some useful links:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* [Manual](http://logging.apache.org/log4j/1.2/manual.html)


* [PropertyConfigurator Javadoc](http://logging.apache.org/log4j/1.2/apidocs/index.html?org/apache/log4j/BasicConfigurator.html)


* [PatternLayout](http://logging.apache.org/log4j/1.2/apidocs/index.html?org/apache/log4j/PatternLayout.html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a quick reference to understand basic log4j usage. If one needs more specialized behavior, it can certainly understand the official doc itself ;)&lt;/p&gt;

&lt;p&gt;To disable a logger you use &lt;code&gt;OFF&lt;/code&gt; (it&amp;rsquo;s kind of an undocumented log level)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;log4j.logger.com.example.VerboseCode=OFF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Todo: Often log4j is paired with slf4j and commons-logging. Explore these things.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java HTTP client and POST requests</title>
      <link>https://www.zybnet.com/2012/04/12/java-http-client-and-post-requests/</link>
      <pubDate>Thu, 12 Apr 2012 15:48:41 +0000</pubDate>
      <author>raffaeleSgarro@gmail.com (Raffaele Sgarro)</author>
      <guid>https://www.zybnet.com/2012/04/12/java-http-client-and-post-requests/</guid>
      <description>&lt;p&gt;Apache HttpClient&amp;rsquo;s site is poorly designed, so the documentation is difficult to find and it also assumes you have some confidence with HTTP. So, first things first, &lt;a href=&#34;http://hc.apache.org/httpcomponents-client-ga/index.html&#34;&gt;this is the link&lt;/a&gt; to the project, and &lt;a href=&#34;http://hc.apache.org/httpcomponents-client-ga/tutorial/html/&#34;&gt;here is the official tutorial&lt;/a&gt;. (BTW, you&amp;rsquo;ll often see GA which stands for General Availability - ie a public release)&lt;/p&gt;

&lt;p&gt;On the left pane, they say there are three modules: HttpClient, HttpMime and HttpClient Cache. I never used the Cache module myself, but the other two are available in the libs folder &lt;a href=&#34;http://hc.apache.org/downloads.cgi&#34;&gt;of the archive&lt;/a&gt; - often the javascript for choosing the mirror server is broken, so you have to manually type the hostname yourself in the browser. Inside the lib directory of the archive there are 5 jars needed for a HTTP client capable  of doing our POST requests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;httpclient&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;httpcore (required by httpclient, contains classes in org.apache.http.entity for example)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;httpmime&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;mime-4j (required by httpmime I guess)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commons-logging&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the basic workflow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;construct a HttpPost, providing a URL and an HttpEntity (StringEntity, FileEntity or the full featured &lt;a href=&#34;http://hc.apache.org/httpcomponents-core-ga/httpcore/apidocs/org/apache/http/HttpEntity.html&#34;&gt;MultipartEntity&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;configure a &lt;a href=&#34;http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/client/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt; and execute the POST method created at step 1&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;examine the StatusLine of the HttpResponse just returned from step 2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Consume the HttpEntity given by the HttpResponse&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the reference link &lt;a href=&#34;http://hc.apache.org/httpcomponents-client-ga/logging.html&#34;&gt;for logging configuration&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Main {

    public static void main(String[] args) throws ClientProtocolException, IOException {
        // 1. construct the multipart entity of the post request
        MultipartEntity multipart = new MultipartEntity();
        multipart.addPart(&amp;quot;a_number&amp;quot;, new StringBody(&amp;quot;12345&amp;quot;));
        multipart.addPart(&amp;quot;a_string&amp;quot;, new StringBody(&amp;quot;Lorem ipsum&amp;quot;));
        multipart.addPart(&amp;quot;an_array[]&amp;quot;, new StringBody(&amp;quot;element 1&amp;quot;));
        multipart.addPart(&amp;quot;an_array[]&amp;quot;, new StringBody(&amp;quot;element 2&amp;quot;));
        String resourceName = &amp;quot;lorem_ipsum.txt&amp;quot;;
        multipart.addPart(&amp;quot;a_file&amp;quot;, new InputStreamBody(
                Main.class.getResourceAsStream(resourceName),
                &amp;quot;text/plain&amp;quot;,
                resourceName));

        // 2. create the post request
        HttpPost post = new HttpPost(&amp;quot;http://w.zybnet.com/test/post_from_java.php&amp;quot;);
        post.setEntity(multipart);

        // 3. execute the post method
        HttpClient client = new DefaultHttpClient();
        HttpResponse response = client.execute(post);

        // 4. read the response
        HttpEntity entity = response.getEntity();
        System.out.println(response.getStatusLine().toString());
        BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent()));
        String line = null;
        while ((line = reader.readLine()) != null)
            System.out.println(line);
        reader.close();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a common debug session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[DEBUG] SingleClientConnManager - Get connection for route HttpRoute[{}-&amp;gt;http://w.zybnet.com]
[DEBUG] RequestAddCookies - CookieSpec selected: best-match
[DEBUG] DefaultHttpClient - Attempt 1 to execute request
[DEBUG] DefaultClientConnection - Sending request: POST /test/post_from_java.php HTTP/1.1
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;POST /test/post_from_java.php HTTP/1.1[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Transfer-Encoding: chunked[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Type: multipart/form-data; boundary=irl07RcWWX5xEGtgFYJo5-mnA168uOtnQ[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Host: w.zybnet.com[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Connection: Keep-Alive[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;User-Agent: Apache-HttpClient/4.0.1 (java 1.5)[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Expect: 100-Continue[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[EOL]&amp;quot;
[DEBUG] headers - &amp;gt;&amp;gt; POST /test/post_from_java.php HTTP/1.1
[DEBUG] headers - &amp;gt;&amp;gt; Transfer-Encoding: chunked
[DEBUG] headers - &amp;gt;&amp;gt; Content-Type: multipart/form-data; boundary=irl07RcWWX5xEGtgFYJo5-mnA168uOtnQ
[DEBUG] headers - &amp;gt;&amp;gt; Host: w.zybnet.com
[DEBUG] headers - &amp;gt;&amp;gt; Connection: Keep-Alive
[DEBUG] headers - &amp;gt;&amp;gt; User-Agent: Apache-HttpClient/4.0.1 (java 1.5)
[DEBUG] headers - &amp;gt;&amp;gt; Expect: 100-Continue
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;HTTP/1.1 100 Continue[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;[EOL]&amp;quot;
[DEBUG] DefaultClientConnection - Receiving response: HTTP/1.1 100 Continue
[DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 100 Continue
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;a7[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;--irl07RcWWX5xEGtgFYJo5-mnA168uOtnQ[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Disposition: form-data; name=&amp;quot;a_number&amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Type: text/plain; charset=UTF-8[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Transfer-Encoding: 8bit[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;12345&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;af[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;--irl07RcWWX5xEGtgFYJo5-mnA168uOtnQ[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Disposition: form-data; name=&amp;quot;a_string&amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Type: text/plain; charset=UTF-8[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Transfer-Encoding: 8bit[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Lorem ipsum&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;af[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;--irl07RcWWX5xEGtgFYJo5-mnA168uOtnQ[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Disposition: form-data; name=&amp;quot;an_array[]&amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Type: text/plain; charset=UTF-8[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Transfer-Encoding: 8bit[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;element 1&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;af[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;--irl07RcWWX5xEGtgFYJo5-mnA168uOtnQ[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Disposition: form-data; name=&amp;quot;an_array[]&amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Type: text/plain; charset=UTF-8[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Transfer-Encoding: 8bit[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;element 2&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;25e[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;--irl07RcWWX5xEGtgFYJo5-mnA168uOtnQ[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Disposition: form-data; name=&amp;quot;a_file&amp;quot;; filename=&amp;quot;lorem_ipsum.txt&amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Type: text/plain[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;Content-Transfer-Encoding: binary[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot; Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;29[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;--irl07RcWWX5xEGtgFYJo5-mnA168uOtnQ--[\r][\n]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;0[EOL]&amp;quot;
[DEBUG] wire - &amp;gt;&amp;gt; &amp;quot;[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;HTTP/1.1 200 OK[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;Date: Thu, 12 Apr 2012 15:43:20 GMT[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;Server: Apache/2.2.20 (Ubuntu)[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;X-Powered-By: PHP/5.3.6-13ubuntu3.6[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;Vary: Accept-Encoding[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;Content-Length: 442[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;Keep-Alive: timeout=5, max=100[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;Connection: Keep-Alive[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;Content-Type: text/html[EOL]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;[EOL]&amp;quot;
[DEBUG] DefaultClientConnection - Receiving response: HTTP/1.1 200 OK
[DEBUG] headers - &amp;lt;&amp;lt; HTTP/1.1 200 OK
[DEBUG] headers - &amp;lt;&amp;lt; Date: Thu, 12 Apr 2012 15:43:20 GMT
[DEBUG] headers - &amp;lt;&amp;lt; Server: Apache/2.2.20 (Ubuntu)
[DEBUG] headers - &amp;lt;&amp;lt; X-Powered-By: PHP/5.3.6-13ubuntu3.6
[DEBUG] headers - &amp;lt;&amp;lt; Vary: Accept-Encoding
[DEBUG] headers - &amp;lt;&amp;lt; Content-Length: 442
[DEBUG] headers - &amp;lt;&amp;lt; Keep-Alive: timeout=5, max=100
[DEBUG] headers - &amp;lt;&amp;lt; Connection: Keep-Alive
[DEBUG] headers - &amp;lt;&amp;lt; Content-Type: text/html
[DEBUG] DefaultHttpClient - Connection can be kept alive for 5000 ms
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;array(3) {[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  [&amp;quot;a_number&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  string(5) &amp;quot;12345&amp;quot;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  [&amp;quot;a_string&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  string(11) &amp;quot;Lorem ipsum&amp;quot;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  [&amp;quot;an_array&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  array(2) {[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    [0]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    string(9) &amp;quot;element 1&amp;quot;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    [1]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    string(9) &amp;quot;element 2&amp;quot;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  }[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;}[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;array(1) {[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  [&amp;quot;a_file&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  array(5) {[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    [&amp;quot;name&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    string(15) &amp;quot;lorem_ipsum.txt&amp;quot;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    [&amp;quot;type&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    string(10) &amp;quot;text/plain&amp;quot;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    [&amp;quot;tmp_name&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    string(14) &amp;quot;/tmp/phpk7ljPt&amp;quot;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    [&amp;quot;error&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    int(0)[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    [&amp;quot;size&amp;quot;]=&amp;gt;[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;    int(429)[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;  }[\n]&amp;quot;
[DEBUG] wire - &amp;lt;&amp;lt; &amp;quot;}[\n]&amp;quot;
[DEBUG] SingleClientConnManager - Releasing connection org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter@6fa9fc
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>