<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html5 on ZYBNET</title>
    <link>https://www.zybnet.com/tags/html5/index.xml</link>
    <description>Recent content in Html5 on ZYBNET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>raffaeleSgarro@gmail.com (Raffaele Sgarro)</managingEditor>
    <webMaster>raffaeleSgarro@gmail.com (Raffaele Sgarro)</webMaster>
    <atom:link href="https://www.zybnet.com/tags/html5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rotate a shape about an arbitrary point</title>
      <link>https://www.zybnet.com/2012/03/14/rotate-a-shape-about-an-arbitrary-point/</link>
      <pubDate>Wed, 14 Mar 2012 23:31:25 +0000</pubDate>
      <author>raffaeleSgarro@gmail.com (Raffaele Sgarro)</author>
      <guid>https://www.zybnet.com/2012/03/14/rotate-a-shape-about-an-arbitrary-point/</guid>
      <description>&lt;p&gt;I wrote this to answer &lt;a href=&#34;http://stackoverflow.com/q/9701784/315306&#34;&gt;a question on StackOverflow&lt;/a&gt;.
It&amp;rsquo;s a piece of Javascript code to rotate an object around an arbitrary point. I underestimated the complexity
of this problem and found no available solution online. To be honest, the objective is quite simple to achieve,
but neverthless it made me review trigonometry and linear algebra and exercise the canvas API.
Here is &lt;a href=&#34;http://jsfiddle.net/raffaele181188/Cfdcn/&#34;&gt;the original JSFiddle&lt;/a&gt; and this is the final result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybnet.com/images/rotate.png&#34; alt=&#34;Rotate rectangle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here the code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * This demo program draws a rectangle rotated
 * about a pivot point for the amount &amp;quot;gamma&amp;quot;
 *
 */
var context = document.getElementById(&amp;quot;canvas&amp;quot;).getContext(&amp;quot;2d&amp;quot;);
// rectangle&#39;s dimensions
var width = 75;
var height = 35;
// rotation angle
var gamma = 45 * Math.PI / 180;
// the pivot coordinates
var x = 200;
var y = 170;

// Some padding
context.translate(100, 100);

// Draw a rectangle in (0,0) and

function draw(color) {
    context.strokeStyle = color;
    context.lineWidth = 4;
    // Random offset
    context.strokeRect(23, 13, width, height);
    arrow(0, 0, width * 1.5, 0, color);
    arrow(0, 0, 0, height * 1.5, color);
}

function sqr(number) {
    return number * number;
}

function distance(x1, y1, x2, y2) {
    return Math.sqrt(sqr(x1 - x2) + sqr(y1 - y2));
}

// Draw an arrow from (x1, y1) to (x2, y2)

function arrow(x1, y1, x2, y2, color) {
    context.strokeStyle = color || &amp;quot;#0b0&amp;quot;;
    context.lineWidth = 1;
    // draw the line
    context.beginPath();
    context.moveTo(x1, y1);
    context.lineTo(x2, y2);
    context.stroke();
    context.closePath();
    // draw the head
    context.save();
    context.translate(x2, y2);
    m = distance(x1, y1, x2, y2);
    sin = (y2 - y1) / m;
    cos = (x2 - x1) / m;
    alpha = Math.asin(sin);
    if (alpha &amp;gt; 0 &amp;amp;&amp;amp; cos &amp;lt; 0) alpha = Math.PI - alpha;
    if (alpha &amp;lt; 0 &amp;amp;&amp;amp; cos &amp;lt; 0) alpha = -Math.PI + Math.abs(alpha);
    context.rotate(alpha);
    context.beginPath();
    context.moveTo(0, 0);
    context.lineTo(-5, 2);
    context.moveTo(0, 0);
    context.lineTo(-5, -2);
    context.stroke();
    context.closePath();
    context.restore();
}

// Draw the base rectangle with grey
draw(&amp;quot;#bbb&amp;quot;);

// Rotate about an arbitrary point (red)
// 1. normalize
magnitude = Math.sqrt(x * x + y * y);
senA = -y / magnitude;
cosA = -x / magnitude;

// 2. compute the sin and cos of (alpha + gamma)
senAG = Math.cos(gamma) * senA + Math.sin(gamma) * cosA;
cosAG = Math.cos(gamma) * cosA - Math.sin(gamma) * senA;

// 3. Back to the old coordinate space
originTranslatedX = cosAG * magnitude + x;
originTranslatedY = senAG * magnitude + y;

// Draw arrows to show the rotation of the origin
// about the pivot point for the specified amount
arrow(x, y, 0, 0);
arrow(x, y, originTranslatedX, originTranslatedY);
context.save();
context.translate(originTranslatedX, originTranslatedY);
context.rotate(gamma);
draw(&amp;quot;#b00&amp;quot;);
context.restore();â€‹
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>